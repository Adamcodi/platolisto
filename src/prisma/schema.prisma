generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String?  @unique
  name          String?
  image         String?
  createdAt     DateTime @default(now())
  pantry        PantryItem[]
  menus         Menu[]
  photos        Photo[]
  subscription  Subscription?
  accounts      Account[]
  sessions      Session[]
}

model PantryItem {
  id      String  @id @default(cuid())
  user    User    @relation(fields: [userId], references: [id])
  userId  String
  name    String
  has     Boolean @default(true)
}

model Menu {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  weekStart  DateTime
  prefsJson  Json
  itemsJson  Json
  totalCost  Float
}

model Photo {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  url       String
  analysis  Json
  kcalTotal Int
  createdAt DateTime @default(now())
}

model Subscription {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
  stripeCustId  String   @unique
  stripeSubId   String?
  plan          String   // free | monthly | yearly
  status        String   // active, trialing, canceled, past_due
  currentPeriodEnd DateTime?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@id([identifier, token])
}
